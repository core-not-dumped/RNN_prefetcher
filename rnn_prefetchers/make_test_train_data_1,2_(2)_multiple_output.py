# -*- coding: utf-8 -*-
"""make_test_train_data_1,2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18R-mh-7QwYR99YvgDB3vbJFb2VFxu0zP
"""

from google.colab import drive
drive.mount('/content/drive')

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Colab\ Notebooks

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
from keras.datasets import imdb
from keras.preprocessing import sequence
from keras.layers import Input, Dense, Embedding, LSTM
from keras.models import Model
import keras
import tensorflow as tf
import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import shutil
import globalobject as g
from tqdm import tqdm

#f = open(g.text_file + ".txt", 'r')
f = open('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '.txt', 'r')

load_address = list()

f.seek(0, 0)
while True:
  line = f.readline()
  if not line: break
  split_line = line.split(', ')
  load_address.append(split_line[2])

for i in range(len(load_address)):
  load_address[i] = int(load_address[i], 16)//64

print("\nload_address example: ")
print(load_address[:100])

delta = list()
for i in range(len(load_address)-1):
  delta.append(load_address[i+1] - load_address[i])

for i in range(len(delta)):
  if delta[i] > 500:
    delta[i] = 1000
    continue
  if delta[i] < -500:
    delta[i] = 0
    continue
  delta[i] += 500

print("\ndelta example, final delta:")
print(delta[0:100])
print(delta[-1])

delta_bundle = list()
for i in range(len(delta) - g.seq_length):
  delta_bundle.append(delta[i:i+g.seq_length+1])
delta_bundle = np.array(delta_bundle)

print("\ndelta_bundle example:")
print(delta_bundle)

rnn_data = delta_bundle[:,:-1]
rnn_data = np.array(rnn_data)
print("\nfirst input example(rnn_data): ")
print(rnn_data)

# 8 -> [0,0,0,1] change int to categorical value
def address_to_binary(a):
  binary_int = list()
  for i in range(g.MAXLEN):
    # /1000 -> scaling
    binary_int.append(a%2)
    a = a//2
  return binary_int

address_binary_input = list()
for i in range(g.seq_length, len(load_address)-1):
  address_binary_input.append(address_to_binary(load_address[i]))

print("\naddress binary input example")
print(address_binary_input[0])
address_binary_input = np.array(address_binary_input)

delta_output = delta_bundle[:,-1:]
delta_output = delta_output.flatten()
print("\noutput example:")
print(delta_output)

index_multiple_delta_output = np.zeros((len(delta) - g.seq_length - g.multiple_delta_number + 1,g.multiple_delta_number))
for i in range(g.seq_length, len(delta) - g.multiple_delta_number + 1):
  for j in range(g.multiple_delta_number):
    if load_address[i+j+1] - load_address[i] > 500:
      continue
    if load_address[i+j+1] - load_address[i] < -500:
      continue
    index_multiple_delta_output[i-g.seq_length][j] = load_address[i+j+1] - load_address[i] + 500

print(index_multiple_delta_output)

multiple_delta_output = np.zeros((len(delta) - g.seq_length - g.multiple_delta_number + 1, 1001))
for i in range(len(delta) - g.seq_length - g.multiple_delta_number + 1):
  for j in range(g.multiple_delta_number):
    if index_multiple_delta_output[i][j] == 0:
      continue
    multiple_delta_output[i][(int)(index_multiple_delta_output[i][j])] = 1

np.set_printoptions(threshold=1001)
print("\nmultiple_delta_output_example")
print(multiple_delta_output.shape)
print(multiple_delta_output[0])
print(multiple_delta_output[0][499])

print('output shape')
print(rnn_data.shape)
print(address_binary_input.shape)
print(delta_output.shape)
print(multiple_delta_output.shape)

rnn_data = rnn_data[:-g.multiple_delta_number+1,:]
address_binary_input = address_binary_input[:-g.multiple_delta_number+1,:]
delta_output = delta_output[:-g.multiple_delta_number+1]

print(rnn_data.shape)
print(address_binary_input.shape)
print(delta_output.shape)
print(multiple_delta_output.shape)

delete_list = list()
for i in range(len(delta_output)):
  if delta_output[i] == 0 or delta_output[i] == 1000:
    delete_list.append(i)

delta_output = np.delete(delta_output, delete_list)
rnn_data = np.delete(rnn_data, delete_list, 0)
address_binary_input = np.delete(address_binary_input, delete_list, 0)

print("\n0 and 1000 removed delta output example:")
print(delta_output)

idx = np.arange(rnn_data.shape[0])
np.random.shuffle(idx)

rnn_data = rnn_data[idx]
address_binary_input = address_binary_input[idx]
delta_output = delta_output[idx]
multiple_delta_output = multiple_delta_output[idx]

cut_index = len(rnn_data) * g.train_model_percentage // 100

train_rnn_data = rnn_data[:cut_index,:]
test_rnn_data = rnn_data[cut_index:]

train_address_binary_input = address_binary_input[:cut_index,:]
test_address_binary_input = address_binary_input[cut_index:,:]

train_delta_output = delta_output[:cut_index]
test_delta_output = delta_output[cut_index:]

train_multiple_delta_output = multiple_delta_output[:cut_index,:]
test_multiple_delta_output = multiple_delta_output[cut_index:,:]

np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_train_rnn_data', train_rnn_data)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_test_rnn_data', test_rnn_data)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_train_address_binary_input', train_address_binary_input)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_test_address_binary_input', test_address_binary_input)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_train_delta_output', train_delta_output)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_test_delta_output', test_delta_output)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_train_multiple_delta_output', train_multiple_delta_output)
np.save('/content/drive/MyDrive/Colab Notebooks/dataset/' + g.text_file + '_test_multiple_delta_output', test_multiple_delta_output)

